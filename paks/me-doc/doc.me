/*
    doc.me - me-doc targets
 */

Me.load({
    modules: [
        '?doc.es',
    ],

    internal: {
        platforms: [ 'local' ],
    },

    targets: {
        doc: {
            depends: [ 'clean-doc', 'manpages', 'render-doc', 'gen-doc', 'api', 'render-mkdocs' ],
        },

        manpages: {
            depends: ['all'],
            action: `
                let man = Cmd.locate('man')
                let man2html = Cmd.locate('man2html')
                if (man && man2html) {
                    for each (file in ls(['${TOP}/doc*/man/*.1', '${TOP}/docs/man/*.3'])) {
                        let name = file.basename
                        trace('Generate', 'Manual page for ' + name)
                        let response = run([man, file], {filter: true})
                        response = response.replace(/.\b/g, '')
                        file.replaceExt('txt').write(response)
                        /*
                            man2html cannot reliably handle overstrike

                        let cmd = Cmd([man2html], {detach: true})
                        cmd.write(response)
                        cmd.finalize()
                        response = cmd.response
                        response = response.
                            replace(/&amp/g, '\&amp;').
                            replace(/&gt/g, '\&gt;').
                            replace(/&lt/g, '\&lt;')
                        response = '<!DOCTYPE html>\n<html lang="eng">\n<head>\n<title>' + 
                            file.basename.trimExt().toString().toPascal() + ' Man Page</title>\n</head>\n' + 
                            response + '</html>'
                        file.replaceExt('html').write(response)
                        */
                    }
                } else {
                    trace('Skip', 'manpages bacause man or man2html cannot be located')
                }
            `,
        },

        'render-doc': {
            home: '${TOP}',
            action: `
                let doc = Path('doc').exists ? 'doc' : '.'
                if (Path(doc + '/expansive.es').exists || Path(doc + '/expansive.json').exists) {
                    run('pak --dir ' + doc + ' mode release')
                    trace('Render', 'expansive --clean render')
                    run('expansive --clean --chdir ' + doc + ' render')
                    run('pak --dir ' + doc + ' mode debug')
                }
            `,
        },

        'render-mkdocs': {
            home: '${TOP}',
            action: `
                let doc = Path('doc').exists ? 'doc' : '.'
                if (Path(doc + '/mkdocs.yml').exists) {
                    run('mkdocs build', {dir: doc})
                }
            `
        },
        'gen-doc': {},
        'api': {},

        'clean-doc': {
            type: 'clean',
            action: `rmdir(['../doc/api/html', '../doc/api/xml', '../api/html', '../api/xml'])`
        },
    },
})
