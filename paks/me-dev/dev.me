/*
    dev.me -- Embedthis Development Plugin
 */

Me.load({
    plugins: [ 'doc' ],

    modules: [
        'dev.es',
    ],

    settings: {
        depth: App.getenv('BUILD_DEPTH') || 1,
    },

    internal: {
        platforms: [ 'local' ],
    },

    targets: {
        removeFiles: {
            home: '${TOP}',
            type: 'exe',
            rule: 'gui'
            sources: [ 'package/windows/removeFiles.c' ],
            enable: `me.platform.like == 'windows' && Path('package/windows/removeFiles.c').exists`,
            generate: false,
        },

        'projects-clobber': {
            action: `
                rm(['${dir.proj}/*.mk', '${dir.proj}/*.sh'])
                rmdir(['${dir.proj}/*-*-default'])
            `
        },

/*
        upload: {
            action: `
                me.settings.depth = App.getenv('BUILD_DEPTH') || me.settings.depth
                if (me.settings.depth < 2) {
                    trace('Info', 'Upload skipped at build depth ' + me.settings.depth)
                } else {
                    let s = me.settings
                    let uri = s.farmUri || App.getenv('BUILD_UPLOAD')
                    let key = s.farmKey || App.getenv('BUILD_KEY')
                    let branch = App.getenv('BUILD_BRANCH') || 'dev'
                    if (!key) {
                        throw 'Missing a farm authorization key'
                    }
                    if (!uri) {
                        throw 'Missing a farm upload URI'
                    }
                    let base = s.name + '-' + s.version
                    let files = me.dir.rel.files('*' + base + '*.pkg*')
                    files += me.dir.rel.files('*' + base + '*x86.exe.zip*')
                    files += me.dir.rel.files('*' + base + '*x64.exe.zip*')
                    files += me.dir.rel.files('*' + base + '*.deb*')
                    if (App.getenv('BUILD_UPLOAD_SOURCE') == 'true') {
                        files += me.dir.rel.files('*' + base + '-src*')
                        files += me.dir.rel.files('*' + base + '-flat*')
                        files += me.dir.rel.files(s.name + '-flat.tgz')
                    }
                    if (files.length == 0) {
                        trace('Info', 'No files to upload')
                    }
                    for each (file in files) {
                        let http = new Http
                        trace('Upload', file.relativeTo(me.dir.rel) + ' size ' + 
                            (file.size / 1024 / 1024).toFixed(2) + ' MB')
                        http.upload(uri, file, {branch: branch, server: System.hostname, key: key})
                        if (http.status != 200) {
                            throw 'Cant upload ' + file + '\n' + http.response
                        }
                    }
                }
            `,
        },
*/

        unit_test: {
            type: 'test',
            home: '${TOP}',
            action: `
                if (!me.targets.test) {
                    let testme
                    if (Path('test/testme.json5').exists) {
                        testme = Cmd.locate('tm')
                    } else if (Path('test').exists) {
                        testme = Cmd.locate('testme')
                        if (!testme) {
                            testme = Cmd.locate('testme', [App.exeDir, me.dir.bin])
                        }
                    }
                    if (testme) {
                        if (me.dir.top.join('test').exists) {
                            run([testme, '--depth', me.settings.depth], {dir: 'test'})
                        }
                    } else {
                        // trace('Test', 'The testme program cannot be located')
                    }
                }
            `,
            platforms: [ 'local' ],
        }

/*
        upgrade: {
            home: '${TOP}',
            depends: [ 'paksync', 'build' ],
            action: ' ',
        },

        up: {
            depends: [ 'upgrade' ],
        },

        sync: {
            home: '${TOP}',
            action: `sh('pak sync')`,
        },
*/
    },
})
